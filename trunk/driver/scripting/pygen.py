# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
#   driver/scripting/pygen.py
#   Copyright 2009 Jim Storch
#   Distributed under the terms of the GNU General Public License
#   See docs/LICENSE.TXT or http://www.gnu.org/licenses/ for details
#------------------------------------------------------------------------------

import sys

from driver.error import BogScriptError
from driver.scripting.token import TokenIter


class PyGen(object):

    """
    Given source as a collection of tokens, generate corresponding python code.
    """

    def __init__(self, tokens):

        self.token_iter = TokenIter(tokens)
        self.pycode = '## Autogenerated Code\n'
        self.line = ''
        self.indent = 0
        self.parens = 0
        self.is_conditional = False
        self._generate()

    def add_line(self):

        if not self.line.strip() == '':
            self.pycode += self.line
            if self.is_conditional:
                self.pycode += ':'
                self.is_conditional = False
            self.pycode += '\n'

        ## Indent the next line 4 spaces per indent level
        self.line = ' ' * (self.indent * 4)         

    def _generate(self):

        for token in self.token_iter:
           
            #print token
 
            cat = token.category
            val = token.value

            if cat == 'symbol':
                
                if val == 'eol':
                    self.add_line()
                    continue                    

                elif val == 'begin_block':
                    self.indent += 1
                    self.add_line()
                    continue

                elif val == 'end_block':
                    self.indent -= 1
                    self.add_line()
                    continue
                            
                elif val == 'begin_paren':
                    self.line += '('
                    self.parens += 1
                    continue
   
                elif val == 'end_paren':
                    self.line += ') '
                    self.parens -= 1
                    continue

                elif val == 'separator':
                    self.line += ', '
                    continue

                elif val == 'assignment':
                    self.line += '= '
                    continue

                elif val == 'multiplication':
                    self.line += '* '
                    continue

                elif val == 'division':
                    self.line += '/ '
                    continue

                else:
                    raise BogScriptErrorr(
                        "Unhandled symbol '%s'" % val) 

            elif cat == 'call':
                self.line += val
                continue

            elif cat == 'integer':
                self.line += str(val) + ''
                continue

            elif cat == 'float':
                self.line += str(val) + ''
                continue

            elif cat == 'string':
                self.line += '\"' + val + '\"'

            elif cat == 'conditional':
                self.line += val + ' '
                self.is_conditional = True

            elif cat == 'keyword':
                self.line += val + ' '
                self.is_conditional = True

            elif cat == 'indentifier':
                self.line += val + ' '
            
            else:
                raise BogScriptErrorr("Unhandled category '%s'"
                    % cat) 

        if self.indent > 0:
            raise BogScriptError(
                'Unmatched opening brace in source.')

        if self.indent < 0:
            raise BogScriptError(
                'Unmatched closing braces in source.')        
        
        if self.parens > 0:
            raise BogScriptError(
                'Unmatched opening parenthesis in source.')

        if self.parens < 0:
            raise BogScriptError(
                'Unmatched closing parenthesis in source.')

